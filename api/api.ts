/* tslint:disable */
/* eslint-disable */
/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof Address
     */
    'lat': number;
    /**
     * 
     * @type {number}
     * @memberof Address
     */
    'lon': number;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'cityFiasId': string;
}
/**
 * 
 * @export
 * @interface AddressSuggestRequest
 */
export interface AddressSuggestRequest {
    /**
     * 
     * @type {string}
     * @memberof AddressSuggestRequest
     */
    'address'?: string;
    /**
     * 
     * @type {number}
     * @memberof AddressSuggestRequest
     */
    'lat'?: number;
    /**
     * 
     * @type {number}
     * @memberof AddressSuggestRequest
     */
    'lon'?: number;
    /**
     * 
     * @type {string}
     * @memberof AddressSuggestRequest
     */
    'cityFiasId': string;
}
/**
 * 
 * @export
 * @interface AuthCodeVerifyRequest
 */
export interface AuthCodeVerifyRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthCodeVerifyRequest
     */
    'phoneNumber': string;
    /**
     * 
     * @type {string}
     * @memberof AuthCodeVerifyRequest
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface AuthRefreshTokenRequest
 */
export interface AuthRefreshTokenRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthRefreshTokenRequest
     */
    'refreshToken': string;
}
/**
 * 
 * @export
 * @interface AuthSendCode200Response
 */
export interface AuthSendCode200Response {
    /**
     * в миллисикундах
     * @type {number}
     * @memberof AuthSendCode200Response
     */
    'expirationTime': number;
}
/**
 * 
 * @export
 * @interface AuthToken
 */
export interface AuthToken {
    /**
     * 
     * @type {string}
     * @memberof AuthToken
     */
    'access': string;
    /**
     * 
     * @type {string}
     * @memberof AuthToken
     */
    'refresh': string;
}
/**
 * 
 * @export
 * @interface Conception
 */
export interface Conception {
    /**
     * 
     * @type {string}
     * @memberof Conception
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Conception
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Conception
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof Conception
     */
    'additionText': string;
    /**
     * 
     * @type {string}
     * @memberof Conception
     */
    'imageBanner': string;
    /**
     * 
     * @type {string}
     * @memberof Conception
     */
    'deliveryTime': string;
    /**
     * 
     * @type {string}
     * @memberof Conception
     */
    'workTime': string;
    /**
     * 
     * @type {number}
     * @memberof Conception
     */
    'costliness': ConceptionCostlinessEnum;
    /**
     * 
     * @type {boolean}
     * @memberof Conception
     */
    'isAvailable': boolean;
    /**
     * 
     * @type {string}
     * @memberof Conception
     */
    'notAvailableDescription': string;
}

export const ConceptionCostlinessEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type ConceptionCostlinessEnum = typeof ConceptionCostlinessEnum[keyof typeof ConceptionCostlinessEnum];

/**
 * 
 * @export
 * @interface ConceptionAll200Response
 */
export interface ConceptionAll200Response {
    /**
     * 
     * @type {Array<Conception>}
     * @memberof ConceptionAll200Response
     */
    'markets': Array<Conception>;
    /**
     * 
     * @type {Array<Conception>}
     * @memberof ConceptionAll200Response
     */
    'restaurants': Array<Conception>;
}
/**
 * 
 * @export
 * @interface ConceptionCallbackRequest
 */
export interface ConceptionCallbackRequest {
    /**
     * 
     * @type {string}
     * @memberof ConceptionCallbackRequest
     */
    'conceptionId': string;
    /**
     * 
     * @type {string}
     * @memberof ConceptionCallbackRequest
     */
    'phoneNumber': string;
}
/**
 * 
 * @export
 * @interface ConceptionChoose200Response
 */
export interface ConceptionChoose200Response {
    /**
     * 
     * @type {string}
     * @memberof ConceptionChoose200Response
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ConceptionChoose200Response
     */
    'name': string;
    /**
     * 
     * @type {Array<ConceptionChoose200ResponseTagsInner>}
     * @memberof ConceptionChoose200Response
     */
    'tags': Array<ConceptionChoose200ResponseTagsInner>;
    /**
     * 
     * @type {Array<ConceptionChoose200ResponseCategoriesInner>}
     * @memberof ConceptionChoose200Response
     */
    'categories': Array<ConceptionChoose200ResponseCategoriesInner>;
    /**
     * 
     * @type {string}
     * @memberof ConceptionChoose200Response
     */
    'openTime': string;
    /**
     * 
     * @type {string}
     * @memberof ConceptionChoose200Response
     */
    'closeTime': string;
    /**
     * 
     * @type {string}
     * @memberof ConceptionChoose200Response
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ConceptionChoose200Response
     */
    'entitiyLink': string;
    /**
     * 
     * @type {string}
     * @memberof ConceptionChoose200Response
     */
    'vkLink': string;
    /**
     * 
     * @type {string}
     * @memberof ConceptionChoose200Response
     */
    'telegramLink': string;
    /**
     * 
     * @type {string}
     * @memberof ConceptionChoose200Response
     */
    'headerLogoImg': string;
    /**
     * 
     * @type {string}
     * @memberof ConceptionChoose200Response
     */
    'headerColor': string;
    /**
     * 
     * @type {Array<PaymentMethod>}
     * @memberof ConceptionChoose200Response
     */
    'paymentMethods': Array<PaymentMethod>;
    /**
     * 
     * @type {Array<PickupPoint>}
     * @memberof ConceptionChoose200Response
     */
    'pickupPoints': Array<PickupPoint>;
    /**
     * 
     * @type {Array<Promotion>}
     * @memberof ConceptionChoose200Response
     */
    'promotions': Array<Promotion>;
}
/**
 * 
 * @export
 * @interface ConceptionChoose200ResponseCategoriesInner
 */
export interface ConceptionChoose200ResponseCategoriesInner {
    /**
     * 
     * @type {string}
     * @memberof ConceptionChoose200ResponseCategoriesInner
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof ConceptionChoose200ResponseCategoriesInner
     */
    'id': string;
    /**
     * 
     * @type {Array<ProductDetail>}
     * @memberof ConceptionChoose200ResponseCategoriesInner
     */
    'products': Array<ProductDetail>;
}
/**
 * 
 * @export
 * @interface ConceptionChoose200ResponseTagsInner
 */
export interface ConceptionChoose200ResponseTagsInner {
    /**
     * 
     * @type {string}
     * @memberof ConceptionChoose200ResponseTagsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ConceptionChoose200ResponseTagsInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ConceptionChoose200ResponseTagsInner
     */
    'img': string;
}
/**
 * 
 * @export
 * @interface ConceptionChooseRequest
 */
export interface ConceptionChooseRequest {
    /**
     * 
     * @type {string}
     * @memberof ConceptionChooseRequest
     */
    'conceptionId': string;
    /**
     * 
     * @type {Address}
     * @memberof ConceptionChooseRequest
     */
    'address': Address;
}
/**
 * 
 * @export
 * @interface ConceptionChooseRequest1
 */
export interface ConceptionChooseRequest1 {
    /**
     * 
     * @type {string}
     * @memberof ConceptionChooseRequest1
     */
    'restaurantId'?: string;
}
/**
 * 
 * @export
 * @interface GetSidePanel200Response
 */
export interface GetSidePanel200Response {
    /**
     * 
     * @type {string}
     * @memberof GetSidePanel200Response
     */
    'image': string;
    /**
     * 
     * @type {string}
     * @memberof GetSidePanel200Response
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof GetSidePanel200Response
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof GetSidePanel200Response
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface Modifier
 */
export interface Modifier {
    /**
     * 
     * @type {string}
     * @memberof Modifier
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Modifier
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof Modifier
     */
    'required': boolean;
    /**
     * 
     * @type {number}
     * @memberof Modifier
     */
    'minAmount': number;
    /**
     * 
     * @type {number}
     * @memberof Modifier
     */
    'maxAmount': number;
    /**
     * 
     * @type {Array<ModifierChildModifiersInner>}
     * @memberof Modifier
     */
    'childModifiers': Array<ModifierChildModifiersInner>;
}
/**
 * 
 * @export
 * @interface ModifierChildModifiersInner
 */
export interface ModifierChildModifiersInner {
    /**
     * 
     * @type {string}
     * @memberof ModifierChildModifiersInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ModifierChildModifiersInner
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof ModifierChildModifiersInner
     */
    'required': boolean;
    /**
     * 
     * @type {number}
     * @memberof ModifierChildModifiersInner
     */
    'minAmount': number;
    /**
     * 
     * @type {number}
     * @memberof ModifierChildModifiersInner
     */
    'maxAmount': number;
    /**
     * 
     * @type {number}
     * @memberof ModifierChildModifiersInner
     */
    'price': number;
}
/**
 * 
 * @export
 * @interface PaymentMethod
 */
export interface PaymentMethod {
    /**
     * 
     * @type {string}
     * @memberof PaymentMethod
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof PaymentMethod
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof PaymentMethod
     */
    'online': boolean;
}
/**
 * 
 * @export
 * @interface PhoneNumber
 */
export interface PhoneNumber {
    /**
     * 
     * @type {string}
     * @memberof PhoneNumber
     */
    'phoneNumber': string;
}
/**
 * 
 * @export
 * @interface PickupPoint
 */
export interface PickupPoint {
    /**
     * 
     * @type {string}
     * @memberof PickupPoint
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof PickupPoint
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PickupPoint
     */
    'address': string;
}
/**
 * 
 * @export
 * @interface PostOrderActiveStatus200Response
 */
export interface PostOrderActiveStatus200Response {
    /**
     * 
     * @type {string}
     * @memberof PostOrderActiveStatus200Response
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof PostOrderActiveStatus200Response
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PostOrderActiveStatus200Response
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface PostOrderActiveStatusRequest
 */
export interface PostOrderActiveStatusRequest {
    /**
     * 
     * @type {string}
     * @memberof PostOrderActiveStatusRequest
     */
    'orderId': string;
}
/**
 * 
 * @export
 * @interface PostOrderAvailableBonus200Response
 */
export interface PostOrderAvailableBonus200Response {
    /**
     * 
     * @type {number}
     * @memberof PostOrderAvailableBonus200Response
     */
    'bonus': number;
}
/**
 * 
 * @export
 * @interface PostOrderAvailableBonusRequest
 */
export interface PostOrderAvailableBonusRequest {
    /**
     * 
     * @type {string}
     * @memberof PostOrderAvailableBonusRequest
     */
    'conceptionId': string;
    /**
     * 
     * @type {Array<ProductForServer>}
     * @memberof PostOrderAvailableBonusRequest
     */
    'products': Array<ProductForServer>;
    /**
     * 
     * @type {string}
     * @memberof PostOrderAvailableBonusRequest
     */
    'promoCode': string;
    /**
     * 
     * @type {string}
     * @memberof PostOrderAvailableBonusRequest
     */
    'deliveryType': PostOrderAvailableBonusRequestDeliveryTypeEnum;
}

export const PostOrderAvailableBonusRequestDeliveryTypeEnum = {
    DELIVERY: 'delivery',
    SELF_DELIVERY: 'selfDelivery'
} as const;

export type PostOrderAvailableBonusRequestDeliveryTypeEnum = typeof PostOrderAvailableBonusRequestDeliveryTypeEnum[keyof typeof PostOrderAvailableBonusRequestDeliveryTypeEnum];

/**
 * 
 * @export
 * @interface PostOrderCheck200Response
 */
export interface PostOrderCheck200Response {
    /**
     * 
     * @type {Array<string>}
     * @memberof PostOrderCheck200Response
     */
    'appliedPromotions'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof PostOrderCheck200Response
     */
    'orderSum': number;
    /**
     * 
     * @type {string}
     * @memberof PostOrderCheck200Response
     */
    'deliveryTime': string;
}
/**
 * 
 * @export
 * @interface PostOrderCheck205Response
 */
export interface PostOrderCheck205Response {
    /**
     * 
     * @type {string}
     * @memberof PostOrderCheck205Response
     */
    'error': string;
}
/**
 * 
 * @export
 * @interface PostOrderCheckRequest
 */
export interface PostOrderCheckRequest {
    /**
     * 
     * @type {string}
     * @memberof PostOrderCheckRequest
     */
    'conceptionId': string;
    /**
     * 
     * @type {Array<ProductForServer>}
     * @memberof PostOrderCheckRequest
     */
    'products': Array<ProductForServer>;
    /**
     * 
     * @type {string}
     * @memberof PostOrderCheckRequest
     */
    'phone': string;
    /**
     * 
     * @type {number}
     * @memberof PostOrderCheckRequest
     */
    'bonus'?: number;
    /**
     * 
     * @type {PickupPoint}
     * @memberof PostOrderCheckRequest
     */
    'pickupPoint'?: PickupPoint;
    /**
     * 
     * @type {Address}
     * @memberof PostOrderCheckRequest
     */
    'address'?: Address;
    /**
     * 
     * @type {string}
     * @memberof PostOrderCheckRequest
     */
    'promoCode'?: string;
}
/**
 * 
 * @export
 * @interface PostOrderMakeOrder200Response
 */
export interface PostOrderMakeOrder200Response {
    /**
     * 
     * @type {string}
     * @memberof PostOrderMakeOrder200Response
     */
    'error': string;
}
/**
 * 
 * @export
 * @interface PostOrderMakeOrder201Response
 */
export interface PostOrderMakeOrder201Response {
    /**
     * 
     * @type {string}
     * @memberof PostOrderMakeOrder201Response
     */
    'payUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostOrderMakeOrder201Response
     */
    'orderId': string;
}
/**
 * 
 * @export
 * @interface PostOrderMakeOrderRequest
 */
export interface PostOrderMakeOrderRequest {
    /**
     * 
     * @type {string}
     * @memberof PostOrderMakeOrderRequest
     */
    'conceptionId': string;
    /**
     * 
     * @type {Array<ProductForServer>}
     * @memberof PostOrderMakeOrderRequest
     */
    'products': Array<ProductForServer>;
    /**
     * 
     * @type {number}
     * @memberof PostOrderMakeOrderRequest
     */
    'people': number;
    /**
     * 
     * @type {string}
     * @memberof PostOrderMakeOrderRequest
     */
    'promoCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostOrderMakeOrderRequest
     */
    'phone': string;
    /**
     * 
     * @type {Address}
     * @memberof PostOrderMakeOrderRequest
     */
    'address'?: Address;
    /**
     * 
     * @type {string}
     * @memberof PostOrderMakeOrderRequest
     */
    'entrance'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostOrderMakeOrderRequest
     */
    'flat'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostOrderMakeOrderRequest
     */
    'floor'?: string;
    /**
     * 
     * @type {PickupPoint}
     * @memberof PostOrderMakeOrderRequest
     */
    'pickupPoint'?: PickupPoint;
    /**
     * 
     * @type {string}
     * @memberof PostOrderMakeOrderRequest
     */
    'comment'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PostOrderMakeOrderRequest
     */
    'callBack': boolean;
    /**
     * 
     * @type {PaymentMethod}
     * @memberof PostOrderMakeOrderRequest
     */
    'paymentMethod': PaymentMethod;
    /**
     * 
     * @type {number}
     * @memberof PostOrderMakeOrderRequest
     */
    'bonus'?: number;
}
/**
 * 
 * @export
 * @interface PostOrderRecommendationRequest
 */
export interface PostOrderRecommendationRequest {
    /**
     * 
     * @type {string}
     * @memberof PostOrderRecommendationRequest
     */
    'conceptionId'?: string;
    /**
     * 
     * @type {Array<ProductForServer>}
     * @memberof PostOrderRecommendationRequest
     */
    'products'?: Array<ProductForServer>;
}
/**
 * 
 * @export
 * @interface PostPromotionsRequest
 */
export interface PostPromotionsRequest {
    /**
     * 
     * @type {string}
     * @memberof PostPromotionsRequest
     */
    'cityFiasId': string;
}
/**
 * 
 * @export
 * @interface PostUserAbout200Response
 */
export interface PostUserAbout200Response {
    /**
     * 
     * @type {string}
     * @memberof PostUserAbout200Response
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof PostUserAbout200Response
     */
    'img': string;
}
/**
 * 
 * @export
 * @interface PostUserOrders200ResponseInner
 */
export interface PostUserOrders200ResponseInner {
    /**
     * 
     * @type {string}
     * @memberof PostUserOrders200ResponseInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof PostUserOrders200ResponseInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PostUserOrders200ResponseInner
     */
    'date': string;
    /**
     * 
     * @type {string}
     * @memberof PostUserOrders200ResponseInner
     */
    'address': string;
    /**
     * 
     * @type {number}
     * @memberof PostUserOrders200ResponseInner
     */
    'sum': number;
    /**
     * 
     * @type {boolean}
     * @memberof PostUserOrders200ResponseInner
     */
    'isActive': boolean;
    /**
     * 
     * @type {string}
     * @memberof PostUserOrders200ResponseInner
     */
    'status': string;
    /**
     * 
     * @type {Array<PostUserOrders200ResponseInnerProductsInner>}
     * @memberof PostUserOrders200ResponseInner
     */
    'products': Array<PostUserOrders200ResponseInnerProductsInner>;
}
/**
 * 
 * @export
 * @interface PostUserOrders200ResponseInnerProductsInner
 */
export interface PostUserOrders200ResponseInnerProductsInner {
    /**
     * 
     * @type {number}
     * @memberof PostUserOrders200ResponseInnerProductsInner
     */
    'count': number;
    /**
     * 
     * @type {number}
     * @memberof PostUserOrders200ResponseInnerProductsInner
     */
    'oldPrice': number;
    /**
     * 
     * @type {ProductDetail}
     * @memberof PostUserOrders200ResponseInnerProductsInner
     */
    'productDetail': ProductDetail;
}
/**
 * 
 * @export
 * @interface PostUserOrdersRequest
 */
export interface PostUserOrdersRequest {
    /**
     * 
     * @type {string}
     * @memberof PostUserOrdersRequest
     */
    'lastOrderId'?: string;
}
/**
 * 
 * @export
 * @interface PostUserRecallRequest
 */
export interface PostUserRecallRequest {
    /**
     * 
     * @type {string}
     * @memberof PostUserRecallRequest
     */
    'text': string;
}
/**
 * 
 * @export
 * @interface ProductDetail
 */
export interface ProductDetail {
    /**
     * 
     * @type {string}
     * @memberof ProductDetail
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ProductDetail
     */
    'conceptionId': string;
    /**
     * Массив id тэгов
     * @type {Array<string>}
     * @memberof ProductDetail
     */
    'tags': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ProductDetail
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof ProductDetail
     */
    'price': number;
    /**
     * 
     * @type {string}
     * @memberof ProductDetail
     */
    'image': string;
    /**
     * 
     * @type {string}
     * @memberof ProductDetail
     */
    'description': string;
    /**
     * 
     * @type {boolean}
     * @memberof ProductDetail
     */
    'isAvailable': boolean;
    /**
     * 
     * @type {string}
     * @memberof ProductDetail
     */
    'weight': string;
    /**
     * 
     * @type {ProductDetailNutritionFact}
     * @memberof ProductDetail
     */
    'nutritionFact': ProductDetailNutritionFact;
    /**
     * 
     * @type {Array<Modifier>}
     * @memberof ProductDetail
     */
    'modifiers'?: Array<Modifier>;
}
/**
 * 
 * @export
 * @interface ProductDetailNutritionFact
 */
export interface ProductDetailNutritionFact {
    /**
     * 
     * @type {string}
     * @memberof ProductDetailNutritionFact
     */
    'energyValue': string;
    /**
     * 
     * @type {string}
     * @memberof ProductDetailNutritionFact
     */
    'protein': string;
    /**
     * 
     * @type {string}
     * @memberof ProductDetailNutritionFact
     */
    'fat': string;
    /**
     * 
     * @type {string}
     * @memberof ProductDetailNutritionFact
     */
    'carbohydrate': string;
}
/**
 * 
 * @export
 * @interface ProductForServer
 */
export interface ProductForServer {
    /**
     * 
     * @type {string}
     * @memberof ProductForServer
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ProductForServer
     */
    'conceptionId': string;
    /**
     * 
     * @type {string}
     * @memberof ProductForServer
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof ProductForServer
     */
    'amount': number;
    /**
     * 
     * @type {number}
     * @memberof ProductForServer
     */
    'price': number;
    /**
     * 
     * @type {string}
     * @memberof ProductForServer
     */
    'image': string;
    /**
     * 
     * @type {Array<ProductForServerModifiersInner>}
     * @memberof ProductForServer
     */
    'modifiers'?: Array<ProductForServerModifiersInner>;
}
/**
 * 
 * @export
 * @interface ProductForServerModifiersInner
 */
export interface ProductForServerModifiersInner {
    /**
     * 
     * @type {string}
     * @memberof ProductForServerModifiersInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ProductForServerModifiersInner
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof ProductForServerModifiersInner
     */
    'minAmount': number;
    /**
     * 
     * @type {number}
     * @memberof ProductForServerModifiersInner
     */
    'maxAmount': number;
    /**
     * 
     * @type {Array<ProductForServerModifiersInnerChildModifiersInner>}
     * @memberof ProductForServerModifiersInner
     */
    'childModifiers': Array<ProductForServerModifiersInnerChildModifiersInner>;
}
/**
 * 
 * @export
 * @interface ProductForServerModifiersInnerChildModifiersInner
 */
export interface ProductForServerModifiersInnerChildModifiersInner {
    /**
     * 
     * @type {string}
     * @memberof ProductForServerModifiersInnerChildModifiersInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ProductForServerModifiersInnerChildModifiersInner
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof ProductForServerModifiersInnerChildModifiersInner
     */
    'price': number;
}
/**
 * 
 * @export
 * @interface Promotion
 */
export interface Promotion {
    /**
     * 
     * @type {string}
     * @memberof Promotion
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Promotion
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Promotion
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof Promotion
     */
    'image': string;
    /**
     * 
     * @type {string}
     * @memberof Promotion
     */
    'link': string;
}
/**
 * 
 * @export
 * @interface UpdateUserRequest
 */
export interface UpdateUserRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateUserRequest
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserRequest
     */
    'secondName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserRequest
     */
    'birthday'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserRequest
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'secondName'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'birthday'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'phoneNumber': string;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'bonus': number;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Проверка кода отправленного на телефон
         * @summary Verify code
         * @param {AuthCodeVerifyRequest} [authCodeVerifyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authCodeVerify: async (authCodeVerifyRequest?: AuthCodeVerifyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/code-verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authCodeVerifyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Обновление токена после невалидности основного
         * @summary Refresh token
         * @param {AuthRefreshTokenRequest} [authRefreshTokenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRefreshToken: async (authRefreshTokenRequest?: AuthRefreshTokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/refresh-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authRefreshTokenRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Отправка кода подтверждения на номер телефона
         * @summary Send auth code
         * @param {PhoneNumber} [phoneNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSendCode: async (phoneNumber?: PhoneNumber, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/send-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(phoneNumber, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * Проверка кода отправленного на телефон
         * @summary Verify code
         * @param {AuthCodeVerifyRequest} [authCodeVerifyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authCodeVerify(authCodeVerifyRequest?: AuthCodeVerifyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authCodeVerify(authCodeVerifyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Обновление токена после невалидности основного
         * @summary Refresh token
         * @param {AuthRefreshTokenRequest} [authRefreshTokenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authRefreshToken(authRefreshTokenRequest?: AuthRefreshTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authRefreshToken(authRefreshTokenRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Отправка кода подтверждения на номер телефона
         * @summary Send auth code
         * @param {PhoneNumber} [phoneNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authSendCode(phoneNumber?: PhoneNumber, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthSendCode200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authSendCode(phoneNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * Проверка кода отправленного на телефон
         * @summary Verify code
         * @param {AuthCodeVerifyRequest} [authCodeVerifyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authCodeVerify(authCodeVerifyRequest?: AuthCodeVerifyRequest, options?: any): AxiosPromise<AuthToken> {
            return localVarFp.authCodeVerify(authCodeVerifyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Обновление токена после невалидности основного
         * @summary Refresh token
         * @param {AuthRefreshTokenRequest} [authRefreshTokenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRefreshToken(authRefreshTokenRequest?: AuthRefreshTokenRequest, options?: any): AxiosPromise<AuthToken> {
            return localVarFp.authRefreshToken(authRefreshTokenRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Отправка кода подтверждения на номер телефона
         * @summary Send auth code
         * @param {PhoneNumber} [phoneNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSendCode(phoneNumber?: PhoneNumber, options?: any): AxiosPromise<AuthSendCode200Response> {
            return localVarFp.authSendCode(phoneNumber, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * Проверка кода отправленного на телефон
     * @summary Verify code
     * @param {AuthCodeVerifyRequest} [authCodeVerifyRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authCodeVerify(authCodeVerifyRequest?: AuthCodeVerifyRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authCodeVerify(authCodeVerifyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Обновление токена после невалидности основного
     * @summary Refresh token
     * @param {AuthRefreshTokenRequest} [authRefreshTokenRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authRefreshToken(authRefreshTokenRequest?: AuthRefreshTokenRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authRefreshToken(authRefreshTokenRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Отправка кода подтверждения на номер телефона
     * @summary Send auth code
     * @param {PhoneNumber} [phoneNumber] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authSendCode(phoneNumber?: PhoneNumber, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authSendCode(phoneNumber, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ConceptionApi - axios parameter creator
 * @export
 */
export const ConceptionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Получить все концепции
         * @summary Get all conceptions
         * @param {Address} [address] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        conceptionAll: async (address?: Address, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/conception/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(address, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Перезвонить
         * @summary Call back
         * @param {ConceptionCallbackRequest} [conceptionCallbackRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        conceptionCallback: async (conceptionCallbackRequest?: ConceptionCallbackRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/conception/call-back`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(conceptionCallbackRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Главная информация концепции
         * @summary Get conception
         * @param {ConceptionChooseRequest} [conceptionChooseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        conceptionChoose: async (conceptionChooseRequest?: ConceptionChooseRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/conception/choose`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(conceptionChooseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConceptionApi - functional programming interface
 * @export
 */
export const ConceptionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConceptionApiAxiosParamCreator(configuration)
    return {
        /**
         * Получить все концепции
         * @summary Get all conceptions
         * @param {Address} [address] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async conceptionAll(address?: Address, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConceptionAll200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.conceptionAll(address, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Перезвонить
         * @summary Call back
         * @param {ConceptionCallbackRequest} [conceptionCallbackRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async conceptionCallback(conceptionCallbackRequest?: ConceptionCallbackRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.conceptionCallback(conceptionCallbackRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Главная информация концепции
         * @summary Get conception
         * @param {ConceptionChooseRequest} [conceptionChooseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async conceptionChoose(conceptionChooseRequest?: ConceptionChooseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConceptionChoose200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.conceptionChoose(conceptionChooseRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ConceptionApi - factory interface
 * @export
 */
export const ConceptionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConceptionApiFp(configuration)
    return {
        /**
         * Получить все концепции
         * @summary Get all conceptions
         * @param {Address} [address] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        conceptionAll(address?: Address, options?: any): AxiosPromise<ConceptionAll200Response> {
            return localVarFp.conceptionAll(address, options).then((request) => request(axios, basePath));
        },
        /**
         * Перезвонить
         * @summary Call back
         * @param {ConceptionCallbackRequest} [conceptionCallbackRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        conceptionCallback(conceptionCallbackRequest?: ConceptionCallbackRequest, options?: any): AxiosPromise<void> {
            return localVarFp.conceptionCallback(conceptionCallbackRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Главная информация концепции
         * @summary Get conception
         * @param {ConceptionChooseRequest} [conceptionChooseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        conceptionChoose(conceptionChooseRequest?: ConceptionChooseRequest, options?: any): AxiosPromise<ConceptionChoose200Response> {
            return localVarFp.conceptionChoose(conceptionChooseRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConceptionApi - object-oriented interface
 * @export
 * @class ConceptionApi
 * @extends {BaseAPI}
 */
export class ConceptionApi extends BaseAPI {
    /**
     * Получить все концепции
     * @summary Get all conceptions
     * @param {Address} [address] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptionApi
     */
    public conceptionAll(address?: Address, options?: AxiosRequestConfig) {
        return ConceptionApiFp(this.configuration).conceptionAll(address, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Перезвонить
     * @summary Call back
     * @param {ConceptionCallbackRequest} [conceptionCallbackRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptionApi
     */
    public conceptionCallback(conceptionCallbackRequest?: ConceptionCallbackRequest, options?: AxiosRequestConfig) {
        return ConceptionApiFp(this.configuration).conceptionCallback(conceptionCallbackRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Главная информация концепции
     * @summary Get conception
     * @param {ConceptionChooseRequest} [conceptionChooseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptionApi
     */
    public conceptionChoose(conceptionChooseRequest?: ConceptionChooseRequest, options?: AxiosRequestConfig) {
        return ConceptionApiFp(this.configuration).conceptionChoose(conceptionChooseRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Список подсказок адресов
         * @summary Get address suggestions
         * @param {AddressSuggestRequest} [addressSuggestRequest] Отправляем с запросом адрес текстом или широту и долготу
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressSuggest: async (addressSuggestRequest?: AddressSuggestRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/address/suggest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addressSuggestRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Доступные города для доставки
         * @summary Get cities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCity: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/city`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get side panel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSidePanel: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/side-panel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Пуолучить все акции для города
         * @summary Get promotions
         * @param {PostPromotionsRequest} [postPromotionsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPromotions: async (postPromotionsRequest?: PostPromotionsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/promotions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postPromotionsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Список подсказок адресов
         * @summary Get address suggestions
         * @param {AddressSuggestRequest} [addressSuggestRequest] Отправляем с запросом адрес текстом или широту и долготу
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addressSuggest(addressSuggestRequest?: AddressSuggestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Address>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addressSuggest(addressSuggestRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Доступные города для доставки
         * @summary Get cities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCity(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Address>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCity(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get side panel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSidePanel(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSidePanel200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSidePanel(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Пуолучить все акции для города
         * @summary Get promotions
         * @param {PostPromotionsRequest} [postPromotionsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPromotions(postPromotionsRequest?: PostPromotionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Promotion>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postPromotions(postPromotionsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Список подсказок адресов
         * @summary Get address suggestions
         * @param {AddressSuggestRequest} [addressSuggestRequest] Отправляем с запросом адрес текстом или широту и долготу
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressSuggest(addressSuggestRequest?: AddressSuggestRequest, options?: any): AxiosPromise<Array<Address>> {
            return localVarFp.addressSuggest(addressSuggestRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Доступные города для доставки
         * @summary Get cities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCity(options?: any): AxiosPromise<Array<Address>> {
            return localVarFp.getCity(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get side panel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSidePanel(options?: any): AxiosPromise<GetSidePanel200Response> {
            return localVarFp.getSidePanel(options).then((request) => request(axios, basePath));
        },
        /**
         * Пуолучить все акции для города
         * @summary Get promotions
         * @param {PostPromotionsRequest} [postPromotionsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPromotions(postPromotionsRequest?: PostPromotionsRequest, options?: any): AxiosPromise<Array<Promotion>> {
            return localVarFp.postPromotions(postPromotionsRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Список подсказок адресов
     * @summary Get address suggestions
     * @param {AddressSuggestRequest} [addressSuggestRequest] Отправляем с запросом адрес текстом или широту и долготу
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addressSuggest(addressSuggestRequest?: AddressSuggestRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addressSuggest(addressSuggestRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Доступные города для доставки
     * @summary Get cities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCity(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCity(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get side panel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSidePanel(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSidePanel(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Пуолучить все акции для города
     * @summary Get promotions
     * @param {PostPromotionsRequest} [postPromotionsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postPromotions(postPromotionsRequest?: PostPromotionsRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postPromotions(postPromotionsRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrderApi - axios parameter creator
 * @export
 */
export const OrderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Узнать статус заказа
         * @summary Get order status
         * @param {PostOrderActiveStatusRequest} [postOrderActiveStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOrderActiveStatus: async (postOrderActiveStatusRequest?: PostOrderActiveStatusRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/order/active-status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postOrderActiveStatusRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Получить доступные бонусы
         * @summary Get available bonuses
         * @param {PostOrderAvailableBonusRequest} [postOrderAvailableBonusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOrderAvailableBonus: async (postOrderAvailableBonusRequest?: PostOrderAvailableBonusRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/order/available-bonus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postOrderAvailableBonusRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Проверка заказа
         * @summary Check order
         * @param {PostOrderCheckRequest} [postOrderCheckRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOrderCheck: async (postOrderCheckRequest?: PostOrderCheckRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/order/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postOrderCheckRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Сделать заказ
         * @summary Make order
         * @param {PostOrderMakeOrderRequest} [postOrderMakeOrderRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOrderMakeOrder: async (postOrderMakeOrderRequest?: PostOrderMakeOrderRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/order/make-order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postOrderMakeOrderRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Получить рекомендации
         * @summary Get recommendations
         * @param {PostOrderRecommendationRequest} [postOrderRecommendationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOrderRecommendation: async (postOrderRecommendationRequest?: PostOrderRecommendationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/order/recommendation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postOrderRecommendationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderApi - functional programming interface
 * @export
 */
export const OrderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderApiAxiosParamCreator(configuration)
    return {
        /**
         * Узнать статус заказа
         * @summary Get order status
         * @param {PostOrderActiveStatusRequest} [postOrderActiveStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postOrderActiveStatus(postOrderActiveStatusRequest?: PostOrderActiveStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostOrderActiveStatus200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postOrderActiveStatus(postOrderActiveStatusRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Получить доступные бонусы
         * @summary Get available bonuses
         * @param {PostOrderAvailableBonusRequest} [postOrderAvailableBonusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postOrderAvailableBonus(postOrderAvailableBonusRequest?: PostOrderAvailableBonusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostOrderAvailableBonus200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postOrderAvailableBonus(postOrderAvailableBonusRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Проверка заказа
         * @summary Check order
         * @param {PostOrderCheckRequest} [postOrderCheckRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postOrderCheck(postOrderCheckRequest?: PostOrderCheckRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostOrderCheck200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postOrderCheck(postOrderCheckRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Сделать заказ
         * @summary Make order
         * @param {PostOrderMakeOrderRequest} [postOrderMakeOrderRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postOrderMakeOrder(postOrderMakeOrderRequest?: PostOrderMakeOrderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostOrderMakeOrder200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postOrderMakeOrder(postOrderMakeOrderRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Получить рекомендации
         * @summary Get recommendations
         * @param {PostOrderRecommendationRequest} [postOrderRecommendationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postOrderRecommendation(postOrderRecommendationRequest?: PostOrderRecommendationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductDetail>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postOrderRecommendation(postOrderRecommendationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrderApi - factory interface
 * @export
 */
export const OrderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderApiFp(configuration)
    return {
        /**
         * Узнать статус заказа
         * @summary Get order status
         * @param {PostOrderActiveStatusRequest} [postOrderActiveStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOrderActiveStatus(postOrderActiveStatusRequest?: PostOrderActiveStatusRequest, options?: any): AxiosPromise<PostOrderActiveStatus200Response> {
            return localVarFp.postOrderActiveStatus(postOrderActiveStatusRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Получить доступные бонусы
         * @summary Get available bonuses
         * @param {PostOrderAvailableBonusRequest} [postOrderAvailableBonusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOrderAvailableBonus(postOrderAvailableBonusRequest?: PostOrderAvailableBonusRequest, options?: any): AxiosPromise<PostOrderAvailableBonus200Response> {
            return localVarFp.postOrderAvailableBonus(postOrderAvailableBonusRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Проверка заказа
         * @summary Check order
         * @param {PostOrderCheckRequest} [postOrderCheckRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOrderCheck(postOrderCheckRequest?: PostOrderCheckRequest, options?: any): AxiosPromise<PostOrderCheck200Response> {
            return localVarFp.postOrderCheck(postOrderCheckRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Сделать заказ
         * @summary Make order
         * @param {PostOrderMakeOrderRequest} [postOrderMakeOrderRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOrderMakeOrder(postOrderMakeOrderRequest?: PostOrderMakeOrderRequest, options?: any): AxiosPromise<PostOrderMakeOrder200Response> {
            return localVarFp.postOrderMakeOrder(postOrderMakeOrderRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Получить рекомендации
         * @summary Get recommendations
         * @param {PostOrderRecommendationRequest} [postOrderRecommendationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOrderRecommendation(postOrderRecommendationRequest?: PostOrderRecommendationRequest, options?: any): AxiosPromise<Array<ProductDetail>> {
            return localVarFp.postOrderRecommendation(postOrderRecommendationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrderApi - object-oriented interface
 * @export
 * @class OrderApi
 * @extends {BaseAPI}
 */
export class OrderApi extends BaseAPI {
    /**
     * Узнать статус заказа
     * @summary Get order status
     * @param {PostOrderActiveStatusRequest} [postOrderActiveStatusRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public postOrderActiveStatus(postOrderActiveStatusRequest?: PostOrderActiveStatusRequest, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).postOrderActiveStatus(postOrderActiveStatusRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Получить доступные бонусы
     * @summary Get available bonuses
     * @param {PostOrderAvailableBonusRequest} [postOrderAvailableBonusRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public postOrderAvailableBonus(postOrderAvailableBonusRequest?: PostOrderAvailableBonusRequest, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).postOrderAvailableBonus(postOrderAvailableBonusRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Проверка заказа
     * @summary Check order
     * @param {PostOrderCheckRequest} [postOrderCheckRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public postOrderCheck(postOrderCheckRequest?: PostOrderCheckRequest, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).postOrderCheck(postOrderCheckRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Сделать заказ
     * @summary Make order
     * @param {PostOrderMakeOrderRequest} [postOrderMakeOrderRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public postOrderMakeOrder(postOrderMakeOrderRequest?: PostOrderMakeOrderRequest, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).postOrderMakeOrder(postOrderMakeOrderRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Получить рекомендации
     * @summary Get recommendations
     * @param {PostOrderRecommendationRequest} [postOrderRecommendationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public postOrderRecommendation(postOrderRecommendationRequest?: PostOrderRecommendationRequest, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).postOrderRecommendation(postOrderRecommendationRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Данные пользователя
         * @summary Get or Patch user data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * О нас
         * @summary User\'s about
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserAbout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/about`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Заказы пользователя
         * @summary User\'s orders
         * @param {PostUserOrdersRequest} [postUserOrdersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserOrders: async (postUserOrdersRequest?: PostUserOrdersRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postUserOrdersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Оставить отзыв
         * @summary User recall
         * @param {PostUserRecallRequest} [postUserRecallRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserRecall: async (postUserRecallRequest?: PostUserRecallRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/recall`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postUserRecallRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Изменить данные пользователя
         * @summary 
         * @param {UpdateUserRequest} [updateUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (updateUserRequest?: UpdateUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * Данные пользователя
         * @summary Get or Patch user data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * О нас
         * @summary User\'s about
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUserAbout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostUserAbout200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUserAbout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Заказы пользователя
         * @summary User\'s orders
         * @param {PostUserOrdersRequest} [postUserOrdersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUserOrders(postUserOrdersRequest?: PostUserOrdersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PostUserOrders200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUserOrders(postUserOrdersRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Оставить отзыв
         * @summary User recall
         * @param {PostUserRecallRequest} [postUserRecallRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUserRecall(postUserRecallRequest?: PostUserRecallRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUserRecall(postUserRecallRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Изменить данные пользователя
         * @summary 
         * @param {UpdateUserRequest} [updateUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(updateUserRequest?: UpdateUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(updateUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * Данные пользователя
         * @summary Get or Patch user data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser(options?: any): AxiosPromise<User> {
            return localVarFp.getCurrentUser(options).then((request) => request(axios, basePath));
        },
        /**
         * О нас
         * @summary User\'s about
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserAbout(options?: any): AxiosPromise<PostUserAbout200Response> {
            return localVarFp.postUserAbout(options).then((request) => request(axios, basePath));
        },
        /**
         * Заказы пользователя
         * @summary User\'s orders
         * @param {PostUserOrdersRequest} [postUserOrdersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserOrders(postUserOrdersRequest?: PostUserOrdersRequest, options?: any): AxiosPromise<Array<PostUserOrders200ResponseInner>> {
            return localVarFp.postUserOrders(postUserOrdersRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Оставить отзыв
         * @summary User recall
         * @param {PostUserRecallRequest} [postUserRecallRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserRecall(postUserRecallRequest?: PostUserRecallRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postUserRecall(postUserRecallRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Изменить данные пользователя
         * @summary 
         * @param {UpdateUserRequest} [updateUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(updateUserRequest?: UpdateUserRequest, options?: any): AxiosPromise<User> {
            return localVarFp.updateUser(updateUserRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * Данные пользователя
     * @summary Get or Patch user data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getCurrentUser(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getCurrentUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * О нас
     * @summary User\'s about
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public postUserAbout(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).postUserAbout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Заказы пользователя
     * @summary User\'s orders
     * @param {PostUserOrdersRequest} [postUserOrdersRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public postUserOrders(postUserOrdersRequest?: PostUserOrdersRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).postUserOrders(postUserOrdersRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Оставить отзыв
     * @summary User recall
     * @param {PostUserRecallRequest} [postUserRecallRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public postUserRecall(postUserRecallRequest?: PostUserRecallRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).postUserRecall(postUserRecallRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Изменить данные пользователя
     * @summary 
     * @param {UpdateUserRequest} [updateUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public updateUser(updateUserRequest?: UpdateUserRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).updateUser(updateUserRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


